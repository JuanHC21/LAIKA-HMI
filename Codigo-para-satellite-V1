#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_MPU6050.h>
#include <BluetoothSerial.h>
#include <ESP32Servo.h>
#include <SPI.h>
#include <RF24.h>

// Configuración de Bluetooth
BluetoothSerial SerialBT;

// Configuración del BME280
Adafruit_BME280 bme;
#define PRECIONNIVELDELMAR (1025)

// Configuración del MPU6050
Adafruit_MPU6050 mpu;
float roll = 0, pitch = 0, yaw = 0;
float accelX = 0, accelY = 0, accelZ = 0;
float gyroX_offset = 0, gyroY_offset = 0, gyroZ_offset = 0;
unsigned long previousTime = 0;

// Configuración del NRF24
RF24 radio(5, 4); // Pines CE y CSN
const byte address[6] = "00001"; // Dirección para comunicación

// Estructura para datos a enviar por RF 
struct DataPackage {
  float tem;  // Temperatura
  float hum;  // Humedad
  float pre;  // Presión
  float alt;  // Altitud
  float roll, pitch, yaw; // Datos del MPU6050
  float accelX, accelY, accelZ; // Aceleraciones en m/s^2
};
DataPackage data;

// Variable para la referencia de altitud
float referenciaN = 0.0;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32-BT-JJ");
  Serial.println("Bluetooth iniciado. Ahora puedes emparejarlo.");

  // Configuración del BME280
  if (!bme.begin(0x76)) {
    Serial.println("No se encontró un BME280, verifica la conexión.");
    while (1);
  }

  // Configuración del MPU6050
  if (!mpu.begin()) {
    Serial.println("No se pudo encontrar un MPU6050, verifica las conexiones.");
    while (1);
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  calibrateMPU6050();

  // Configuración del NRF24
  radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_HIGH);
  radio.stopListening();
  radio.setChannel(70);

  previousTime = millis();
}

void loop() {
  // Leer comando por Bluetooth
  if (SerialBT.available()) {
    String comando = SerialBT.readStringUntil('\n');
    comando.trim();
    SerialBT.print("Comando recibido: ");
    SerialBT.println(comando);

    if (comando == "reset") {
      referenciaN = bme.readAltitude(PRECIONNIVELDELMAR);
      SerialBT.println("Referencia de altitud reiniciada.");
    }
  }

  // Leer datos del BME280
  data.tem = bme.readTemperature();
  data.hum = bme.readHumidity();
  data.pre = bme.readPressure() / 100.0F;
  data.alt = bme.readAltitude(PRECIONNIVELDELMAR) - referenciaN;

  // Leer datos del MPU6050
  readMPU6050();

  // Mostrar datos en el monitor serial
  //Serial.print("Temperatura: "); Serial.println(data.tem);
  //Serial.print("Humedad: "); Serial.println(data.hum);
  //Serial.print("Presión: "); Serial.println(data.pre);
  //Serial.print("Altitud: "); Serial.println(data.alt);
  //Serial.print("Roll: "); Serial.print(data.roll);
  //Serial.print(", Pitch: "); Serial.print(data.pitch);
  //Serial.print(", Yaw: "); Serial.println(data.yaw);
  //Serial.print("AccelX: "); Serial.print(data.accelX);
  //Serial.print(", AccelY: "); Serial.print(data.accelY);
  //Serial.print(", AccelZ: "); Serial.println(data.accelZ);

  //Formato CVS
  Serial.print(data.roll);
  Serial.print(",");
  Serial.print(data.pitch);
  Serial.print(",");
  Serial.print(data.yaw);
  Serial.print(",");
  Serial.print(data.tem);
  Serial.print(",");
  Serial.print(data.alt);
  Serial.print(",");
  Serial.println(data.accelZ);


  // Enviar datos por RF24
  radio.write(&data, sizeof(DataPackage));

  delay(10);
}

void calibrateMPU6050() {
  for (int i = 0; i < 1000; i++) {
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    gyroX_offset += g.gyro.x;
    gyroY_offset += g.gyro.y;
    gyroZ_offset += g.gyro.z;
    delay(1);
  }
  gyroX_offset /= 1000;
  gyroY_offset /= 1000;
  gyroZ_offset /= 1000;
  SerialBT.println("MPU6050 calibrado.");
}

void readMPU6050() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  float dt = (millis() - previousTime) / 1000.0;
  previousTime = millis();

  // Actualizar valores de giroscopio
  data.roll += (g.gyro.x - gyroX_offset) * dt * (180.0 / M_PI);
  data.pitch += (g.gyro.y - gyroY_offset) * dt * (180.0 / M_PI);
  data.yaw += (g.gyro.z - gyroZ_offset) * dt * (180.0 / M_PI);

  data.roll = normalizeAngle(data.roll);
  data.pitch = normalizeAngle(data.pitch);
  data.yaw = normalizeAngle(data.yaw);

  // Leer aceleraciones
  data.accelX = a.acceleration.x;
  data.accelY = a.acceleration.y;
  data.accelZ = a.acceleration.z;
}

float normalizeAngle(float angle) {
  while (angle > 360) angle -= 720;
  while (angle < -360) angle += 720;
  return angle;
}
